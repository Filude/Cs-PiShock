using System.CodeDom;
using System.Reflection.Metadata.Ecma335;
using Newtonsoft.Json.Linq;

public abstract class Shocker
{
    //     """Base class for :class:`HTTPShocker <pishock.zap.httpapi.HTTPShocker>` and
    //     :class:`SerialShocker <pishock.zap.serialapi.SerialShocker>`.

    //     Applications which only need access to
    //     :meth:`shock() <pishock.zap.httpapi.HTTPShocker.shock()>`,
    //     :meth:`vibrate() <pishock.zap.httpapi.HTTPShocker.vibrate()>`,
    //     :meth:`beep() <pishock.zap.httpapi.HTTPShocker.beep()>`, and
    //     :meth:`info() <pishock.zap.httpapi.HTTPShocker.info()>` (with
    //     :class:`BasicShockerInfo <pishock.zap.core.BasicShockerInfo>` only) can swap out a
    //     :class:`HTTPShocker <pishock.zap.httpapi.HTTPShocker>` for a
    //     :class:`SerialShocker <pishock.zap.serialapi.SerialShocker>` (with only
    //     initialization changing) to support both APIs.
    //     """

#pragma warning disable CA1822 // Mark members as static
    void Shock(float duration, int intensity)
#pragma warning restore CA1822 // Mark members as static
    {

        throw new NotImplementedException();
    }
    void Vibrate()
    {
        {

        }
        throw new NotImplementedException();
    }

    void Beep()
    {
        throw new NotImplementedException();
    }

    BasicShockerInfo Info()
    {

        throw new NotImplementedException();
    }

    /// <summary>
    /// Used by <c> PiShockAPI.GetShockers()</c> and <c>SerialShocker.Info()</c>
    /// Calling <c> HTTPShocker.info() </c> instead returns <c> HTTPShocker.info() </c>
    /// </summary>
    public class BasicShockerInfo
    {
        //    """Basic information about a shocker.

        //     Used by :meth:`PiShockAPI.get_shockers() <pishock.zap.httpapi.PiShockAPI.get_shockers()>` and
        //     :meth:`SerialShocker.info() <pishock.zap.serialapi.SerialShocker.info()>`. Calling
        //     :meth:`HTTPShocker.info() <pishock.zap.httpapi.HTTPShocker.info()>` returns a
        //     :class:`httpapi.DetailedShockerInfo
        //     <pishock.zap.httpapi.DetailedShockerInfo>` instance instead.


        //     Attributes:
        //         name: The name of this shocker in the web interface (or an autogenerated
        //               name for serial shockers).
        //         client_id: The ID of the PiShock this shocker belongs to.
        //         shocker_id: The ID of this shocker.
        //         is_paused: Whether the shocker is currently paused.
        public string? Name { get; set; }
        public int ClientId { get; set; }
        public int ShockerId { get; set; }
        public bool IsPaused { get; set; }
        public bool IsSerial { get; set; }
        public BasicShockerInfo() //Diy lol
        { }
        public BasicShockerInfo(JObject data, string? name = null)
        {
            ClientId = (int)data.SelectToken("client_id")!;


            Name = data.SelectToken("name") != null ? name : (string)data.SelectToken("name")!;
            ShockerId = (int)data.SelectToken("id")!;
            IsPaused = (bool)data.SelectToken("paused")!;
        }
    }
}
public class NotImplementedException : Exception
{
    public NotImplementedException()
    {
    }

    public NotImplementedException(string message) : base(message)
    {
        
    }
    public NotImplementedException(string message, Exception innerException) : base(message, innerException)
    {
    }

}